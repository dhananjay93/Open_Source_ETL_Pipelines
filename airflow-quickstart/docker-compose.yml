# Compose V2 (no 'version:' needed)

x-airflow-common: &airflow-common
  build: .
  image: airflow-with-dbt:2.9.3
  env_file:
    - .env
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./dbt:/opt/airflow/dbt
    - ./data:/opt/airflow/data
  user: "${AIRFLOW_UID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_started

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      # Create a second DB ("metabase") for Metabase to avoid sharing the Airflow DB
      - ./postgres-init:/docker-entrypoint-initdb.d

  redis:
    image: redis:7
    expose:
      - "6379"

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e
        airflow db init
        airflow connections add postgres_default \
          --conn-uri 'postgresql+psycopg2://airflow:airflow@postgres:5432/airflow' || true
        airflow connections add fs_default \
          --conn-type fs --conn-extra '{"path": "/opt/airflow/data"}' || true
        airflow users create \
          --username airflow \
          --firstname Air \
          --lastname Flow \
          --role Admin \
          --email airflow@example.com \
          --password airflow || true
    restart: "no"

  webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    # Healthcheck without relying on curl/wget
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://localhost:8080/health').status==200 else sys.exit(1)\""]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  triggerer:
    <<: *airflow-common
    command: triggerer
    restart: always

  # Metabase UI -> http://localhost:3000
  metabase:
    image: metabase/metabase:v0.50.34
    ports:
      - "3000:3000"
    environment:
      MB_JETTY_PORT: 3000
      MB_DB_TYPE: postgres
      MB_DB_HOST: postgres
      MB_DB_PORT: 5432
      MB_DB_DBNAME: metabase
      MB_DB_USER: airflow
      MB_DB_PASS: airflow
      MB_ENCRYPTION_SECRET: "${MB_ENCRYPTION_SECRET}"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres-db-volume: